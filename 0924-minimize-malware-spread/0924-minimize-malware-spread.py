class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        initial.sort()
        
        n_nodes = len(graph)
        
        reps = {i:i for i in range(n_nodes)}
        rank = [1] * n_nodes
        
        def find(member):
            root = member
            while root != reps[root]:
                root = reps[root]
                
            
            while member != root:
                parent = reps[member]
                reps[member] = root
                member = parent
            
            return root
        
        
        def union(x, y):
            xRep = find(x)
            yRep = find(y)
            
            if xRep == yRep:
                return
            
            if rank[xRep] >= rank[yRep]:
                reps[yRep] = xRep
                rank[xRep] += rank[yRep]
            
            else:
                reps[xRep] = yRep
                rank[yRep] += rank[xRep]
                
        
        
        for i in range(n_nodes):
            for j in range(n_nodes):
                if graph[i][j]:
                    union(i, j)
                    
        infected_count_in_group = defaultdict(int)
        
        for infected_node in initial:
            root = find(infected_node)            
            infected_count_in_group[root] += 1                    
        
        node_to_remove = initial[0]          
        node_contribution = 0
        
        for infected_node in initial:
            root = find(infected_node)                        
            
            node_rank = rank[root]
            other_infected_exists = infected_count_in_group[root] > 1
            
            if other_infected_exists:
                contribution_if_removed = 0
            
            else:                
                contribution_if_removed = node_rank                
        
            if contribution_if_removed > node_contribution:
                node_to_remove = infected_node
                node_contribution = contribution_if_removed
                
        return node_to_remove